#!/usr/bin/env ruby

require "rubygems"
require "thor"

require "socket"

socket = UNIXSocket.new('/tmp/coffin.sock')

class Client
  def initialize(socket)
    @socket = socket
  end

  def down(button)
    @socket.puts("down")
    @socket.puts(button)
  end

  def up(button)
    @socket.puts("up")
    @socket.puts(button)
  end


  def press(button)
    @socket.puts("press")
    @socket.puts(button)
  end

  def hold(button, holdtime)
    @socket.puts("hold")
    @socket.puts(button)
    @socket.puts(holdtime)
  end
end

$client = Client.new(socket)

at_exit do
  socket.puts("break")
  socket.close
end

class CoffinCLI < Thor
  DEFAULT_HOLD_TIME = 5

  %i(power volume_up volume_down).each do |button|
    option :holdtime
    desc "#{button} {press|hold} --holdtime=5", "#{button} button"

    define_method button do |action|
      case action
      when "up"
        $client.up(button)
      when "down"
        $client.down(button)
      when "press"
        $client.press(button)
      when "hold"
        $client.hold(button, Integer(options[:holdtime] || DEFAULT_HOLD_TIME))
      end
    end
  end

  desc "reboot", "reboot"
  def reboot
    $client.down(:power)
    sleep 15
    $client.up(:power)
  end

  desc "fastboot", "fastboot"
  def fastboot
    usb("plug")
    $client.down(:power)
    sleep 0.5
    $client.down(:volume_down)
    sleep 15
    $client.up(:power)
    $client.up(:volume_down)
  end


  desc "screenshot", "screenshot"
  def screenshot
    $client.down(:power)
    $client.down(:volume_down)
    sleep 5
    $client.up(:power)
    $client.up(:volume_down)
  end


  desc "usb", "usb"

  def usb(action)
    case action
    when "plug"
      $client.down(:usb)
    when "unplug"
      $client.up(:usb)
    else
      fail
    end
  end

end

CoffinCLI.start(ARGV)

